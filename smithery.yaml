# =============================================================================
# Smithery Configuration for v0-mcp-ts
# High-performance MCP server for v0.dev AI-powered web development
# =============================================================================

# Basic Project Information
name: v0-mcp-ts
displayName: "v0.dev MCP Server"
description: "🚀 A high-performance Model Context Protocol server that integrates v0.dev AI capabilities for modern web development. Generate React components, audit accessibility, create Tailwind layouts, and debug code with AI assistance. Powered by Node.js LTS and optimized for production use."
version: "2.0.0"
author: "Nicolas Torres <nicotordev@gmail.com>"
organization: "Conce-AI"
license: "MIT"
homepage: "https://github.com/Conce-AI/v0.dev"

# Advanced Metadata for Better Discoverability
metadata:
  repository: "https://github.com/Conce-AI/v0.dev.git"
  documentation: "https://github.com/Conce-AI/v0.dev#readme"
  issues: "https://github.com/Conce-AI/v0.dev/issues"
  changelog: "https://github.com/Conce-AI/v0.dev/blob/main/CHANGELOG.md"
  organization_url: "https://github.com/Conce-AI"
  
  # Geographic & Developer Info
  location: "Chile 🇨🇱"
  developer: "NicoTorDev"
  organization: "Conce-AI"
  timezone: "America/Santiago"
  team: "AI Development Team"
  
  # Technical Specifications
  performance:
    startup_time: "4ms"
    runtime: "Node.js v22 LTS"
    memory_usage: "< 50MB"
    concurrent_requests: "High throughput"
  
  # Compatibility Matrix
  compatibility:
    claude_desktop: true
    cursor: true
    vscode: true
    raycast: true
    windsurf: true
    cline: true
    agentic_tools: true
  
  # API Integration Details
  integrations:
    v0_dev: "Full API integration"
    vercel: "Design system compatible" 
    shadcn_ui: "Component generation"
    tailwind_css: "Layout & theming"
    figma: "Design-to-code workflow"

# Enhanced Keywords for Maximum Discoverability
keywords:
  # Core Technologies
  - v0.dev
  - vercel
  - nextjs
  - react
  - typescript
  - tailwindcss
  - shadcn
  - figma
  - mcp
  - model-context-protocol
  
  # AI & Development
  - ai-tools
  - code-generation
  - component-generation
  - ai-assistant
  - claude
  - llm-tools
  - design-to-code
  - prompt-engineering
  
  # Web Development
  - web-development
  - frontend-tools
  - ui-components
  - design-systems
  - responsive-design
  - accessibility
  - a11y-audit
  - css-themes
  
  # Development Workflow
  - debugging
  - refactoring
  - code-analysis
  - performance
  - productivity-tools
  - developer-experience
  - rapid-prototyping
  
  # Framework Integration
  - react-hooks
  - jsx-components
  - css-modules
  - design-tokens
  - component-library
  - atomic-design
  
  # Geographic & Personal
  - chile
  - nicotordev
  - conce-ai
  - latin-america
  - open-source
  - ai-organization

# Comprehensive Tags for Smithery Registry
tags:
  # Primary Categories
  - ai-development
  - web-development
  - component-generation
  - design-tools
  - accessibility-tools
  - productivity
  
  # Technology Stack
  - react
  - nextjs
  - typescript
  - tailwindcss
  - v0-dev
  - vercel
  - shadcn-ui
  
  # Use Cases
  - rapid-prototyping
  - ui-generation
  - code-refactoring
  - accessibility-auditing
  - theme-generation
  - layout-creation
  
  # Target Audience
  - frontend-developers
  - fullstack-developers
  - ui-designers
  - accessibility-specialists
  - startup-teams
  
  # Quality Indicators
  - production-ready
  - high-performance
  - well-documented
  - actively-maintained
  - community-driven

# Docker Container Runtime Configuration
runtime: "container"

# Build Configuration for Custom Deploy
build:
  dockerfile: "Dockerfile"
  dockerBuildPath: "."
  context: "."
  target: "production"

# HTTP Server Configuration for Smithery Deployment
startCommand:
  type: "http"
  port: 3000
  healthCheck: "/health"
  endpoints:
    mcp: "/mcp"
    health: "/health"
    docs: "/docs"
  
  # JSON Schema for Configuration UI
  configSchema:
    type: "object"
    title: "v0.dev MCP Server Configuration"
    description: "Configure your v0.dev API integration for AI-powered component generation"
    required: ["v0ApiKey"]
    properties:
      v0ApiKey:
        type: "string"
        title: "v0.dev API Key"
        description: "Your v0.dev API key (starts with 'pk_' for production keys)"
        pattern: "^(pk_|sk_|test_).+"
        minLength: 20
        examples: ["pk_prod_1234567890abcdef", "sk_test_abcdef1234567890"]
      
      # Optional Advanced Configuration
      maxTokens:
        type: "integer"
        title: "Max Tokens per Request"
        description: "Maximum tokens for AI responses (default: 4000)"
        default: 4000
        minimum: 100
        maximum: 8000
      
      enableStreaming:
        type: "boolean"
        title: "Enable Streaming Responses"
        description: "Enable real-time streaming for faster response times"
        default: true
      
      debugMode:
        type: "boolean"
        title: "Debug Mode"
        description: "Enable detailed logging for debugging (development only)"
        default: false
  
  # Example Configuration for Quick Setup
  exampleConfig:
    v0ApiKey: "pk_prod_example123456789abcdef"
    maxTokens: 4000
    enableStreaming: true
    debugMode: false

# Comprehensive Tool Catalog
tools:
  - name: "generate_component"
    title: "🎨 AI Component Generator"
    description: "Generate React components using v0.dev AI with TypeScript support, proper prop types, and modern React patterns. Perfect for rapid prototyping and consistent component architecture."
    category: "code-generation"
    complexity: "beginner"
    estimatedTime: "10-30 seconds"
    inputTypes: ["text", "description"]
    outputTypes: ["react-component", "typescript", "jsx"]
    useCases:
      - "Create UI components from text descriptions"
      - "Generate TypeScript interfaces automatically"
      - "Bootstrap component libraries quickly"
      - "Prototype user interfaces rapidly"
    examples:
      - "Generate a responsive navigation bar with dark mode toggle"
      - "Create a data table with sorting and filtering"
      - "Build a modal dialog with form validation"
  
  - name: "refactor_component"
    title: "🔧 Smart Code Refactoring"
    description: "Intelligently refactor React components for better performance, accessibility, and maintainability. Modernize legacy code and apply React best practices automatically."
    category: "code-improvement"
    complexity: "intermediate"
    estimatedTime: "15-45 seconds"
    inputTypes: ["react-component", "jsx", "typescript"]
    outputTypes: ["optimized-component", "performance-notes"]
    useCases:
      - "Modernize class components to functional components"
      - "Optimize re-renders and performance"
      - "Improve accessibility compliance"
      - "Apply consistent coding patterns"
  
  - name: "accessibility_auditor"
    title: "♿ Accessibility Auditor"
    description: "Comprehensive accessibility audit tool that analyzes HTML/JSX for WCAG compliance, suggests improvements, and provides actionable recommendations for inclusive design."
    category: "accessibility"
    complexity: "beginner"
    estimatedTime: "5-15 seconds"
    inputTypes: ["html", "jsx", "component"]
    outputTypes: ["audit-report", "recommendations", "compliance-score"]
    useCases:
      - "WCAG 2.1 compliance checking"
      - "Screen reader compatibility audit"
      - "Color contrast analysis"
      - "Keyboard navigation testing"
    features:
      - "ARIA attributes validation"
      - "Semantic HTML analysis"
      - "Focus management review"
      - "Alternative text suggestions"
  
  - name: "shadcn_component_generator"
    title: "🎯 shadcn/ui Component Builder"
    description: "Generate shadcn/ui compatible components with proper theming, variants, and TypeScript definitions. Seamlessly integrates with existing design systems."
    category: "design-system"
    complexity: "intermediate"
    estimatedTime: "20-40 seconds"
    inputTypes: ["component-spec", "design-requirements"]
    outputTypes: ["shadcn-component", "theme-variables", "variant-definitions"]
    useCases:
      - "Create design system components"
      - "Generate themeable UI elements"
      - "Build consistent component variants"
      - "Integrate with existing shadcn/ui setups"
  
  - name: "tailwind_layout_generator"
    title: "🏗️ Tailwind Layout Engine"
    description: "Generate responsive layouts using Tailwind CSS with mobile-first design, flexbox/grid patterns, and modern CSS techniques for professional web interfaces."
    category: "layout-design"
    complexity: "beginner"
    estimatedTime: "10-25 seconds"
    inputTypes: ["layout-description", "wireframe", "requirements"]
    outputTypes: ["tailwind-html", "responsive-css", "layout-components"]
    useCases:
      - "Create responsive grid layouts"
      - "Build flexible navigation systems"
      - "Design dashboard interfaces"
      - "Generate landing page sections"
    features:
      - "Mobile-first responsive design"
      - "Flexbox and CSS Grid patterns"
      - "Modern spacing and typography"
      - "Cross-browser compatibility"
  
  - name: "css_theme_generator"
    title: "🎨 Advanced Theme Generator"
    description: "Create comprehensive CSS themes and Tailwind configurations with color palettes, typography scales, spacing systems, and dark mode support for cohesive design systems."
    category: "theming"
    complexity: "advanced"
    estimatedTime: "30-60 seconds"
    inputTypes: ["brand-colors", "design-tokens", "style-preferences"]
    outputTypes: ["theme-config", "css-variables", "tailwind-config"]
    useCases:
      - "Generate brand-consistent themes"
      - "Create dark/light mode systems"
      - "Build design token libraries"
      - "Customize Tailwind configurations"
    features:
      - "Color palette generation"
      - "Typography scale creation"
      - "Spacing system design"
      - "Component variant theming"

# Prompt Templates for Enhanced AI Interactions
prompts:
  - name: "audit-accessibility"
    title: "🔍 Accessibility Audit Prompt"
    description: "Comprehensive accessibility evaluation with WCAG guidelines and actionable improvement recommendations"
    category: "accessibility"
    
  - name: "generate-component"
    title: "⚡ Component Generation Prompt"
    description: "Smart component creation with modern React patterns, TypeScript support, and best practices"
    category: "code-generation"
    
  - name: "refactor-component"
    title: "🔄 Code Refactoring Prompt"
    description: "Intelligent code improvement with performance optimization and maintainability focus"
    category: "code-improvement"
    
  - name: "generate-css-theme"
    title: "🎨 Theme Generation Prompt"
    description: "Complete design system creation with consistent theming and brand alignment"
    category: "design-system"
    
  - name: "generate-shadcn-component"
    title: "🎯 shadcn/ui Component Prompt"
    description: "Design system component creation with shadcn/ui compatibility and theming"
    category: "component-library"
    
  - name: "generate-tailwind-layout"
    title: "🏗️ Responsive Layout Prompt"
    description: "Modern layout creation with Tailwind CSS and responsive design principles"
    category: "layout-design"
    
  - name: "create-webapp"
    title: "🚀 Full Application Prompt"
    description: "Complete web application scaffolding with modern architecture and best practices"
    category: "application-development"

# Resource Documentation
resources:
  - name: "v0-api-docs"
    title: "📚 v0.dev API Documentation"
    description: "Complete API reference and integration guidelines for v0.dev services"
    category: "documentation"
    
  - name: "performance-metrics"
    title: "📊 Performance Analytics"
    description: "Real-time server performance metrics and usage statistics"
    category: "monitoring"

# Quality Assurance & Standards
quality:
  code_coverage: "> 80%"
  type_safety: "Strict TypeScript"
  testing: "Comprehensive test suite"
  documentation: "Fully documented API"
  performance: "< 4ms startup time"
  reliability: "99.9% uptime"
  security: "Regular security audits"

# Environment & Deployment
environment:
  node_version: "22.x LTS"
  docker_support: true
  cloud_ready: true
  scalable: true
  production_tested: true

# Community & Support
community:
  discussions: "GitHub Discussions"
  issues: "GitHub Issues"
  contributing: "Contributions welcome"
  code_of_conduct: "Contributor Covenant"
  support_level: "Community + Maintainer"

# Analytics & Metrics (for Smithery insights)
analytics:
  target_audience: "Frontend developers, UI/UX designers, Full-stack teams"
  primary_use_cases: "Component generation, Accessibility auditing, Layout creation"
  integration_complexity: "Low - Simple API key setup"
  learning_curve: "Gentle - Intuitive prompts and examples"
  competitive_advantages: "v0.dev integration, Accessibility focus, Production-ready"
