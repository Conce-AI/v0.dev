name: 🧪 Quality & Testing Suite

on:
  push:
    branches-ignore:
      - 'renovate/**'
      - 'dependabot/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests (requires V0_API_KEY)'
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: test
  V0_API_KEY: ${{ secrets.V0_API_KEY }}
  DEBUG: true
  CI: true
  ENABLE_PERFORMANCE_TRACKING: false
  LOG_LEVEL: error

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false

    steps:
      # ─────────────────────────────────────────────
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # For better git history access

      # ─────────────────────────────────────────────
      - name: ⚡ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest # Ensure we get v1.2.15+ for bun audit support

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # ─────────────────────────────────────────────
      - name: 📥 Install dependencies
        run: |
          echo "🚀 Installing dependencies with Bun (up to 25x faster than npm)"
          echo "Bun version: $(bun --version)"
          echo "Node version: $(node --version)"

          if [ -f bun.lock ] || [ -f bun.lockb ]; then
            echo "🟢 Using bun install with lockfile for reproducible builds"
            bun install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            echo "🟡 npm lockfile detected - installing with Bun"
            bun install
            echo "::notice::Consider switching to bun.lock for faster installs"
          elif [ -f yarn.lock ]; then
            echo "🟡 Yarn lockfile detected - installing with Bun"
            bun install
            echo "::notice::Consider switching to bun.lock for faster installs"
          else
            echo "🔴 No lockfile found - this may cause inconsistent installs"
            bun install
            echo "::warning::Consider committing bun.lock for reproducible builds"
          fi

      # ─────────────────────────────────────────────
      - name: 🔍 Type check
        run: |
          echo "Running TypeScript type check..."
          bun run type-check
        continue-on-error: false

      - name: 🛡️ Security audit
        run: |
          echo "Running security audit with Bun..."
          echo "Bun version: $(bun --version)"

          # bun audit is available in v1.2.15+
          if bun audit --audit-level moderate; then
            echo "✅ No moderate or high security vulnerabilities found"
          else
            echo "⚠️ Security vulnerabilities detected by bun audit"
            echo "::warning::Security vulnerabilities found. Review the audit output above"
            # Don't fail the build on vulnerabilities, just warn
            exit 0
          fi

      # ─────────────────────────────────────────────
      - name: 🏗️ Build project
        run: |
          echo "Building project with Bun..."
          echo "Cleaning previous build..."
          bun run clean
          echo "Building..."
          bun run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: ✅ Verify build artifacts
        run: |
          echo "Verifying build output..."

          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist/ directory not found"
            exit 1
          fi

          # Check for main build artifacts
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Build failed: dist/index.js not found"
            echo "Contents of dist/:"
            ls -la dist/ || echo "dist/ is empty"
            exit 1
          fi

          # Verify the built file is executable
          if [ ! -x "dist/index.js" ]; then
            echo "Making dist/index.js executable..."
            chmod +x dist/index.js
          fi

          # Test if the server can start (basic smoke test)
          timeout 10s node dist/index.js --help || echo "Server help command completed"

          # Check build size
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "✅ Build successful - Output size: $DIST_SIZE"
          echo "Build artifacts:"
          find dist/ -type f -name "*.js" | head -10

      # ─────────────────────────────────────────────
      - name: 🧪 Run unit and integration tests
        run: |
          echo "Running comprehensive test suite..."
          echo "Test environment setup:"
          echo "- Node version: $(node --version)"
          echo "- Bun version: $(bun --version)"
          echo "- V0_API_KEY configured: ${{ secrets.V0_API_KEY != '' }}"
          
          # Run tests with different strategies based on API key availability
          if [ -n "${{ secrets.V0_API_KEY }}" ]; then
            echo "🔑 Running full test suite with API integration"
            # Run non-API tests first (faster)
            echo "Running server and prompt tests..."
            bun test tests/server.test.ts tests/prompts.test.ts --run
            
            # Run tool discovery tests (no API calls)
            echo "Running tool discovery tests..."
            bun test tests/tools.test.ts -t "Tool Discovery|Error Handling" --run
            
            # Skip actual API integration tests in CI for speed/reliability
            echo "Skipping API integration tests in CI for performance"
          else
            echo "🔒 Running tests without API integration (no V0_API_KEY)"
            # Run all tests that don't require API calls
            bun test tests/server.test.ts tests/prompts.test.ts --run
            bun test tests/tools.test.ts -t "Tool Discovery|Error Handling" --run
          fi
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 10

      - name: 🧪 Run integration tests (optional)
        if: ${{ github.event.inputs.run_integration_tests == true && secrets.V0_API_KEY != '' }}
        run: |
          echo "Running full integration tests with API calls..."
          echo "⚠️ This may take longer and consume API quota"
          bun test tests/tools.test.ts --run --timeout 30000
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 15
        continue-on-error: true

      - name: 📊 Generate coverage report
        run: |
          echo "Generating test coverage report..."
          bun run test:coverage --run --reporter=verbose
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
          flags: unittests
          name: codecov-${{ matrix.node-version }}
        if: success() || failure() # Upload even if tests fail

      # ─────────────────────────────────────────────
      - name: 🚀 Test server startup
        run: |
          echo "Testing MCP server startup and basic functionality..."
          
          # Start server in background with timeout
          timeout 30s bun run dist/index.js &
          SERVER_PID=$!
          
          echo "Server started with PID: $SERVER_PID"
          sleep 5
          
          # Check if server is still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "✅ Server started successfully and is running"
            kill $SERVER_PID
            wait $SERVER_PID 2>/dev/null || true
          else
            echo "❌ Server failed to start or crashed"
            exit 1
          fi
        env:
          V0_API_KEY: "test-mock-key-12345"
        timeout-minutes: 2

      # ─────────────────────────────────────────────
      - name: 📝 Generate comprehensive job summary
        if: always()
        run: |
          echo "## 🧪 Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js:** $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Bun:** $(bun --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $NODE_ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          if [ -d "dist" ] && [ -f "dist/index.js" ]; then
            DIST_SIZE=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "Unknown")
            echo "- **Build:** ✅ Success (Size: $DIST_SIZE)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Coverage status
          if [ -f "coverage/lcov-report/index.html" ]; then
            echo "- **Coverage Report:** ✅ Generated" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Coverage Report:** ⚠️ Not generated" >> $GITHUB_STEP_SUMMARY
          fi

          # API integration status
          if [ -n "${{ secrets.V0_API_KEY }}" ]; then
            echo "- **API Integration:** 🔑 Available" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **API Integration:** 🔒 Disabled (no API key)" >> $GITHUB_STEP_SUMMARY
          fi

          # Package manager info
          if [ -f "bun.lock" ] || [ -f "bun.lockb" ]; then
            echo "- **Package Manager:** Bun (native lockfile) ⚡" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Package Manager:** Bun (migrated from npm/yarn) ⚡" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Server Features Tested" >> $GITHUB_STEP_SUMMARY
          echo "- **Tools:** generate_component, refactor_component, accessibility_auditor, shadcn_component_generator, tailwind_layout_generator, css_theme_generator" >> $GITHUB_STEP_SUMMARY
          echo "- **Prompts:** 7 prompts including accessibility, component generation, and webapp creation" >> $GITHUB_STEP_SUMMARY
          echo "- **Resources:** API docs and performance metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Features:** Performance tracking, enhanced logging, notification debouncing" >> $GITHUB_STEP_SUMMARY

      # ─────────────────────────────────────────────
      - name: 💾 Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-node-${{ matrix.node-version }}
          path: |
            dist/
            coverage/
          retention-days: 7
        if: always()

      - name: 💾 Archive test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 30
        if: always()