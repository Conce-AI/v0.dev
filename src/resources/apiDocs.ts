export const apiDocsResource = {
  name: "v0-api-docs",
  uri: "v0://api-docs",
  handler: async () => ({
    contents: [
      {
        uri: "v0://api-docs",
        mimeType: "text/markdown",
        text: `# v0-mcp-ts Advanced Documentation\n\n## Enhanced v0.dev Integration v2.0\n\n### Available Tools\n\n#### ðŸš€ **Core Development Tools**\n- \`generate_webapp\` - Complete web application generation\n- \`enhance_code\` - AI-powered code improvements\n- \`debug_code\` - Automated debugging and fixes\n- \`generate_component\` - Reusable component creation\n\n#### ðŸ”§ **Advanced Development Tools**\n- \`analyze_refactor_code\` - Deep code analysis and refactoring\n- \`generate_database_schema\` - Database design and migrations\n- \`generate_api_endpoints\` - REST/GraphQL API generation\n- \`generate_tests\` - Comprehensive test suite generation\n- \`generate_cicd_pipeline\` - CI/CD pipeline automation\n\n#### âš¡ **Performance & Security**\n- \`optimize_performance\` - Performance analysis and optimization\n- \`security_audit\` - Security assessment and hardening\n\n### Model: v0-1.0-md\n\n**Enhanced Features:**\n- **Multi-framework support**: Next.js, React, Vue, Svelte, Angular\n- **Enterprise-grade**: Security, performance, and scalability focused\n- **AI-powered analysis**: Deep code understanding and optimization\n- **Production-ready**: Complete project generation with best practices\n- **Streaming support**: Real-time response for better UX\n\n### Usage Limits & Performance\n\n- **Daily Requests**: 200 messages per day\n- **Context Window**: 128,000 tokens\n- **Max Output**: 32,000 tokens\n- **Streaming**: Enabled by default for 3x faster response times\n\n### Best Practices\n\n1. **Be Specific**: Include framework, features, and requirements\n2. **Provide Context**: Share existing code when enhancing\n3. **Use Streaming**: Enable for faster, real-time feedback\n4. **Include Errors**: Provide error messages for better debugging\n5. **Specify Types**: Define component props and data structures\n6. **Security First**: Always include security considerations\n7. **Performance Focus**: Mention performance requirements\n\n### Supported Technologies\n\n#### **Frontend Frameworks**\n- Next.js 14+ (App Router, Server Components)\n- React 18+ (Hooks, Suspense, Concurrent Features)\n- Vue 3+ (Composition API, Pinia, Nuxt 3)\n- Svelte 4+ (SvelteKit, Stores)\n- Angular 17+ (Standalone Components, Signals)\n\n#### **Backend Technologies**\n- Node.js + Express/Fastify/Hono\n- Next.js API Routes & Server Actions\n- GraphQL (Apollo, Yoga, Pothos)\n- tRPC for type-safe APIs\n- Serverless (Vercel, Netlify, AWS Lambda)\n\n#### **Databases & ORMs**\n- PostgreSQL + Prisma/Drizzle\n- MySQL + TypeORM/Sequelize\n- MongoDB + Mongoose\n- SQLite for development\n- Redis for caching\n\n#### **Testing Frameworks**\n- Vitest (recommended)\n- Jest + Testing Library\n- Cypress for E2E\n- Playwright for cross-browser\n- Supertest for API testing\n\n#### **DevOps & Deployment**\n- GitHub Actions\n- Docker & Kubernetes\n- Vercel, Netlify, AWS\n- CI/CD pipelines\n- Performance monitoring\n\nFor more information, visit: https://github.com/nicotordev/v0-mcp-ts`,
      },
    ],
  }),
}; 